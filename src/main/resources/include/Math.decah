// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {



    float PI = 3.1415926535897932; //Constante PI

    int floor(float f){ //Partie entiere d'un flottant
        //Puisque cast non implemente on est force a utiliser cette methode
        int k = 0;
        while (k < f){
            k = k+1;
        }
        k = k-1;
        return k; //Pour etre sur que l'ont arrondit toujours par defaut
    }

    int puiss(int base, int exponent){//Retourne base^exponent
        int tmp = 1;
        int count = exponent;
        if (exponent < 0){
            return 0; //puiss est construite pour ne calculer que les puissances positives
        }
        if (exponent == 0){ //Meme si base == 0 :^)
            return 1;
        }
        while (count > 0){
            tmp = tmp * base;
            count = count - 1;
        }
        return tmp;
    }

    float abs(float f){
        if (f<0){
            return -f;
        }
        else {
            return f;
        }
    }

    float sin(float f) { //Algo Alpha: Deux paliers 0->e-5 et e-5->pi/4 
        float sum = 0;
        int k = 0;
        float z = 0;
        float sign = -1;
        if (f == 0.0){
            return 0.0;
        }
        else if (f<0){ //Symetrie sin(-f) = -sin(f)
            return -sin(-f);
        }
        if (f<0.00001){
            return f;
        }
        else if (f <=PI/4){ //Taylor Ordre 13
            sum = f - (0.1666666)*f*f*f;
            sum = sum + (0.0083333)*f*f*f*f*f - (0.0001984)*f*f*f*f*f*f*f; 
            sum = sum + (0.00000275)*f*f*f*f*f*f*f*f*f - (0.00000000250521)*f*f*f*f*f*f*f*f*f*f*f;
            return sum;
        }
        else if (f <=PI/2){ //Egalite sin(f) = cos(PI/2 - f) 
            return cos(PI/2 - f);
        }
        else if (f <=PI){ //Egalite sin(f) = sin(PI-f)
    	    return sin(PI-f);
        }
        else {
            k = floor(f*2/PI);
            z = f - 0.5*k*PI; //
            if (k % 4 == 0 || k % 4 == 1){
                sign = 1;
            }
            return sign * sin(z);
        }
    }
    float cos(float f) { //Meme remarque que sin
        float sum = 0;
        int k = 0;
        float z = 0;
        float sign = -1;
        if (f == 0.0){
            return 1.0;
        }
        else if (f<0){ //Symetrie cos(-f) = cos(f)
            return cos(-f);
        }
        else if (f<0.00001){
            return 1-0.5*f*f;
        }
        else if (f <=PI/4){ //Taylor Ordre 12
            sum = 1 - (0.5)*f*f;
            sum = sum + (0.0416666)*f*f*f*f - (0.0013888)*f*f*f*f*f*f; 
            sum = sum + (0.0000248)*f*f*f*f*f*f*f*f - (0.00000027557)*f*f*f*f*f*f*f*f*f*f;
            return sum;
        }
        else if (f <=PI/2){ //Egalite cos(f) = sin(PI/2 - f) 
            return cos(PI/2 - f);
        }
        else if (f <=PI){ //Egalite cos(f) = -cos(PI-f)
    	    return -cos(PI-f);
        }
        else {
            k = floor(2*f/PI);
            z = f - 0.5*k*PI; 
            if (k % 4 == 0 || k % 4 == 3){
                sign = 1;
            }
            return sign * cos(z);
        }
    }
    float tan(float f){ //A tester: sin/cos plus rapide ou non ?
        float sum = 0;
        int k = 0;
        float z = 0;
        float sign = -1;
        if (f == 0.0){
            return 0.0;
        }
        else if (f < 0){ //Symetrie tan(-f) = -tan(f)
            return - tan(-f);
        }
        else if (f<0.00001){
            return f;
        }
        else if (f <=PI/4){ //Taylor Ordre 7
            sum = 1 - (0.333333)*f*f*f;
            sum = sum + (0.1333333)*f*f*f*f*f - (0.0539682)*f*f*f*f*f*f*f; 
            return sum;
        }
        else if (f <=PI/2){ //Egalite tan(f) = 1/tan(PI/2 - f) 
            return 1/tan(PI/2 - f);
        }
        else if (f <=PI){ //Egalite tan(f) = tan(PI-f)
    	    return tan(PI-f);
        }
        else {
            k = floor(f*2/PI); //Par PI/2
            z = f - 0.5*k*PI; 
            if (k % 4 == 0 || k % 4 == 2){
                sign = 1;
            }
            return sign * tan(z);
        }
    }
    float asin(float f) {
        if (f > 1 || f < 0){
            //Doit retourner un NaN "Not a Number"
        }
        else{
            if (f < 0){
                return - asin(-f);
            }
            else if (f < 0.00001){
                return f;
            }
            else if (f < 0.001){
                return f + 0.166666*f*f*f;
            }
            else {
                return f + 0.166666*f*f*f +  0.075*f*f*f*f*f + 0.044642*f*f*f*f*f*f*f + 0.03038194*f*f*f*f*f*f*f*f*f;
            }
        }
    }
    float atan(float f) {
        if (f < 0){
            return - atan(-f);
        }
        else if (f < 0.00001){
            return f;
        }
        else if (f < 0.001){
            return f - 0.3333333333*f*f*f;
        }
        else if (f < 1){
            return f - 0.3333333333*f*f*f + 0.2*f*f*f*f*f - 0.14285714285*f*f*f*f*f*f*f;
        }
        else if (f == 1){
            return PI/4;
        }
        else {
            return PI/2 - atan(1/f);
        }
    }

     
    int eed(float f) { //eed = ExponentEcritureDeca
    //IMPORTANT: si asm etait implementait on aurait pu recuperer dans la memoire
    //On sait que si 1<=x/y<=2 alors eed(x) = eed(y) 
        int e = 0;
        float tmp = f;
        if (f<0){
            return eed(-f);
        }

        

        if (tmp > 1){
            while (tmp >= 2){
                tmp = tmp / 2;
                e = e + 1;
            }
            return e;
        }
        else {
            while (tmp < 1){
                tmp = tmp * 2;
                e = e - 1;
            }
            return e;
        }
    }

    //int mant(float f){ //Retourne la mantisse de f
        //return floor(abs(f)/puiss(2,eed(f)) - 1)*puiss(2,23))
    //}
    //float ulp(float f) { //Doit retourner 2^(e-127-23)
        //return puiss(2,eed(f)-23); //Le signe de f est traite dans eed
    //}
}


// End of Deca Math library
